//package dev.generators;
package examples.generators;

import java.math.BigInteger;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.io.Writer;
import java.io.IOException;

import circuit.eval.CircuitEvaluator;
import circuit.structure.CircuitGenerator;
import circuit.structure.Wire;
import circuit.structure.WireArray;
//import dev.gadgets.HashGadget;
//import examples.gadgets.hash.SHA256Gadget;
import examples.gadgets.math.LongIntegerModGadget;
import util.Util;
import circuit.auxiliary.*;

public class SetMemGenerator extends CircuitGenerator {

  public static final String uStr

  public static final String hStr = "E7FFE0FAA3F5ED9F6380C927B19C18A335EAD05ABCBB9FC711732C6F2C4A214B";

  public static final String sStr

  public static final String ustr


  public static final String rStr

    private static String[] args;
    // Non-opt membership elements
    // private LongElement long_k, long_r, long_s, long_u, long_h;

    // Opt Membership elements
    private LongElement long_opt_k, long_opt_r, long_opt_s, long_opt_u, long_opt_h, long_opt_l;
    private Wire[] sk;
    //private SHA256Gadget sha2Gadget;

    private int batchSize;
    private int bitsize_k, bitsize_r, bitsize_s, bitsize_u, bitsize_h;

    public static final int bitsizeProd128Primes = 1300; // worst case product for 128 primes: largest 128 primes
    public static final int bitsizeProdFirst256Primes = 2290; // super worst case: all primes


    public SetMemGenerator(String circuitName, int batchSize) {
        super(circuitName);
        this.batchSize = batchSize;

        bitsize_h = 256;

        bitsize_u = 256*batchSize;
        bitsize_s = bitsizeProdFirst256Primes;
        bitsize_r = bitsize_s+bitsize_h+bitsize_u+128;
        bitsize_k = bitsize_r+1;

    }

    public BigInteger getInputFromString(int bitsize, String s)
    {
      int nHexChars = bitsize/4;
      while( s.length() < nHexChars) {
        s = s + s;
      }
      String trimmedStr = s.substring(0, nHexChars);
      return new BigInteger(trimmedStr, 16);
    }



    @Override
    protected void buildCircuit() {
        long_opt_h = createLongElementInput(bitsize_h);
        long_opt_s = createLongElementInput(bitsize_s);
        long_opt_u = createLongElementInput(bitsize_u);

        long_opt_r = createLongElementInput(bitsize_r);
        long_opt_k = createLongElementInput(bitsize_k);

        //long_opt_l = createLongElementInput(new BigInteger("17361E1DB434756DFA4C757E10F320BF5C914D66BEE172343232BB5DB51E8BA9", 16).bitLength());


        // NB: current code is not doing modular exponentation
        LongElement tmp1 = long_opt_u.mul(long_opt_s).mul(long_opt_h);
        LongElement tmp2 = long_opt_r.add(tmp1); // alleged k value

        long_opt_k.assertEquality(tmp2);



        //LongElement tmp3 = new LongIntegerModGadget(tmp2, long_opt_l, 0, false).getRemainder();

/*
        sk = createInputWireArray(64);
        sha2Gadget = new SHA256Gadget(sk, 8, 64, false, false);
        Wire[] digest = sha2Gadget.getOutputWires();
        makeOutputArray(digest);
*/
    }


    @Override
    public void generateSampleInput(CircuitEvaluator circuitEvaluator) {

        BigInteger rVal, uVal, sVal, hVal, kVal;
        rVal = getInputFromString(bitsize_r, rStr);
        sVal = getInputFromString(bitsize_s, sStr);
        hVal = getInputFromString(bitsize_h, hStr);
        uVal = getInputFromString(bitsize_u, uStr);
        kVal = rVal.add(sVal.multiply(uVal.multiply(hVal)));


        circuitEvaluator.setWireValue(long_opt_k, kVal, LongElement.CHUNK_BITWIDTH);
        circuitEvaluator.setWireValue(long_opt_r, rVal, LongElement.CHUNK_BITWIDTH);
        circuitEvaluator.setWireValue(long_opt_u, uVal, LongElement.CHUNK_BITWIDTH);
        circuitEvaluator.setWireValue(long_opt_s, sVal, LongElement.CHUNK_BITWIDTH);
        circuitEvaluator.setWireValue(long_opt_h, hVal, LongElement.CHUNK_BITWIDTH);
        //circuitEvaluator.setWireValue(long_opt_l, new BigInteger("17361E1DB434756DFA4C757E10F320BF5C914D66BEE172343232BB5DB51E8BA9", 16), LongElement.CHUNK_BITWIDTH);


        /*
        circuitEvaluator.setWireValue(long_k, new BigInteger("0AC8A70F130DD874DA8BF72D5864FEDF134E1866971015266D278720D3264290264F21796F69074CDFE7ACC5BF892E02D51F2934B7421AF0E31853918E9F7921BED6A9161FBFFECF8AD46D9A96A1EFD1F85F29D3CA41FBF98D8DE5BE78D3A5C037A2C663C233B5C1FC6AB9C500D9AFB986A824568498E1092BFF3C8126BDE7BE156C2DB9431D56EEB7D4BA0D285B28357FB1C201F44E784D8AB20C3785901A5FC50845CD3357BC07F06C671430CE9619608CEA06CC0A327D5F57FDA9E983A4A09B4DE3498A968E503198CF740C475F8C29DF", 16), LongElement.CHUNK_BITWIDTH);
        circuitEvaluator.setWireValue(long_r, new BigInteger("07E92251B148678141FA41EF5CD32F58B83D5039DEE0C98859DCD02B925CEC1E50597E0A1D1081A945A5B157DC5820BDC5853C812ADD30C10A3B5F38EB1431625BF7217A4B98F9F989F413E13B0459DD23E49BE8474BE1DA8FFE10A8AE541764D8C229115BE5B8582AD940A3A9778C61DEBF896330D4A9345F9F2D0707F1FABA0C2E6B5BAA08E0B1D6030C6FBFE4E8EE17E73E391704565682FE53FC68E4CF41C3D05CA4A8300C17CCE0E6F25C147615DDCE5BDEF9D8007C2956EE4780B9AA6EB5236B0804D0F9CCC02D59ECD8DE136BBDD7", 16), LongElement.CHUNK_BITWIDTH);
        circuitEvaluator.setWireValue(long_u, new BigInteger("A2304B2645E5984DAED4A18F1ABA5D803E42C3860CA8B671692305EBA3B68FA3", 16), LongElement.CHUNK_BITWIDTH);
        circuitEvaluator.setWireValue(long_s, new BigInteger("06A6856769863A073CFDBAAE090228597136F31AE77F27F250CC1EC3C849AA419CDA089F979049F55CB36D390CFC8076785D87CCE4DF872DC8E43E46778F6906CAC2351B1DF16C995B2D7D592C41F17E1ED9AA11CB239F22DC0C0D676229BA1AE1375220AFABE42435A5FD1291BC665B5735DD453FDD918DAABCB486170368EA0EF9954C56FC749D872901F0595014212815", 16), LongElement.CHUNK_BITWIDTH);
        circuitEvaluator.setWireValue(long_h, new BigInteger("AE90FDB7A7319015B561E3E479C96D56FF4727F6E610D804914F782239A7F0F8", 16), LongElement.CHUNK_BITWIDTH);
    */

        /*
        String inputStr = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl";
		for (int i = 0; i < sk.length; i++) {
			circuitEvaluator.setWireValue(sk[i], inputStr.charAt(i));
		}
        */
    }

    public static void main(String[] args) throws Exception {
        /*
        if (args.length != 6) {
            System.out.println("Invalid Input Length");
            System.exit(1);
        }
        */
        SetMemGenerator.args = args;
        int batchSize = 10;
        if (args.length > 0) {
          batchSize = Integer.parseInt(args[0]);
        }
        SetMemGenerator generator = new SetMemGenerator("setmem" + batchSize, batchSize);
        generator.generateCircuit();
        generator.evalCircuit();
        generator.prepFiles();
        //generator.runLibsnark();
    }

}
